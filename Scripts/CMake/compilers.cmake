
if (${CMAKE_C_COMPILER_ID} STREQUAL "arm-none-eabi")
    set(CMAKE_C_COMPILER arm-none-eabi-gcc)
    set(CMAKE_CXX_COMPILER arm-none-eabi-g++)
    set(CMAKE_ASM_COMPILER arm-none-eabi-gcc)
    set(CMAKE_AR arm-none-eabi-ar)
    set(CMAKE_OBJCOPY arm-none-eabi-objcopy)
    set(CMAKE_OBJDUMP arm-none-eabi-objdump)
    set(SIZE arm-none-eabi-size)
    set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
elseif (${CMAKE_C_COMPILER_ID} STREQUAL "Clang")
#    set(CMAKE_C_COMPILER clang)
#    set(CMAKE_CXX_COMPILER clang++)
#    set(CMAKE_ASM_COMPILER clang)
#    set(CMAKE_AR llvm-ar)
#    set(CMAKE_OBJCOPY llvm-objcopy)
#    set(CMAKE_OBJDUMP llvm-objdump)
#    set(SIZE llvm-size)
#    set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
elseif (${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
    set(CMAKE_C_COMPILER gcc)
    set(CMAKE_CXX_COMPILER g++)
    set(CMAKE_ASM_COMPILER gcc)
    set(CMAKE_AR ar)
    set(CMAKE_OBJCOPY objcopy)
    set(CMAKE_OBJDUMP objdump)
    set(SIZE size)
#    set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
elseif (${CMAKE_C_COMPILER_ID} STREQUAL "MSVC")
#    set(CMAKE_C_COMPILER cl)
#    set(CMAKE_CXX_COMPILER cl)
#    set(CMAKE_ASM_COMPILER ml)
#    set(CMAKE_AR lib)
#    set(CMAKE_OBJCOPY copy)
#    set(CMAKE_OBJDUMP dumpbin)
#    set(SIZE dumpbin)
#    set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
elseif (${CMAKE_C_COMPILER_ID} STREQUAL "riscv-none-embed-gcc")
    message(FATAL_ERROR "Unsupported Compiler: ${CMAKE_C_COMPILER_ID}.\tPlease add support in ${CMAKE_CURRENT_LIST_FILE}")
else ()
    message(FATAL_ERROR "Unsupported Compiler: ${CMAKE_C_COMPILER_ID}.\tPlease add support in ${CMAKE_CURRENT_LIST_FILE}")
endif ()


add_compile_options("$<$<C_COMPILER_ID:MSVC>:/utf-8>")
add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/utf-8>")
# OR  -D CMAKE_CXX_FLAGS="/utf-8"
# OR  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /utf-8")
# OR  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /utf-8")
# add_compile_options(/utf-8)




#add_compile_options("$<$<C_COMPILER_ID:GNU>:-fdiagnostics-color=always>")
#add_compile_options("$<$<CXX_COMPILER_ID:GNU>:-fdiagnostics-color=always>")


function(print_compiler_info)
    message(STATUS "Compiler: ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}")
    message(STATUS "\tBuild Type: ${CMAKE_BUILD_TYPE}")
    message(STATUS "\tCC: ${CMAKE_C_COMPILER}")
    message(STATUS "\tCXX: ${CMAKE_CXX_COMPILER}")
    message(STATUS "\tASM: ${CMAKE_ASM_COMPILER}")
    #    message(STATUS "\tOBJCOPY: ${CMAKE_OBJCOPY}")
    #    message(STATUS "\tOBJDUMP: ${CMAKE_OBJDUMP}")
    #    message(STATUS "\tSIZE: ${CMAKE_SIZE}")
    #    message(STATUS "\tAR: ${CMAKE_AR}")
    #    message(STATUS "\tTRY_COMPILE_TARGET_TYPE: ${CMAKE_TRY_COMPILE_TARGET_TYPE}")
endfunction()

function(print_language_standard_info)
    if (NOT DEFINED CMAKE_C_STANDARD OR NOT DEFINED CMAKE_CXX_STANDARD)
        message(STATUS "Language C Available Standards: ${CMAKE_C_COMPILE_FEATURES}")
        message(STATUS "Language C++ Available Standards: ${CMAKE_CXX_COMPILE_FEATURES}")
        message(WARNING "CMAKE_C_STANDARD and CMAKE_CXX_STANDARD are not set. Please set them to a valid value to enable language standard support.")
    else ()
        message(STATUS "Language Standard: C${CMAKE_C_STANDARD}, C++${CMAKE_CXX_STANDARD}")
    endif ()
endfunction()
